#include "main.h"
#define SDA_PIN  6   // SS (SDA)
#define RST_PIN  5   // RST
MFRC522 mfrc522(SDA_PIN, RST_PIN);

void SetupRFID() {
    Serial.println("üì° Configuration du lecteur RFID...");
    SPI.begin();
    mfrc522.PCD_Init();
    if (!mfrc522.PCD_PerformSelfTest()) {
        Serial.println("‚ùå - ERREUR : Le module RFID ne r√©pond pas !");
        while (true);
    }
    Serial.println("‚úÖ - Module RFID d√©tect√© !");
    Serial.println("üõ∞Ô∏è - Lecteur RFID initialis√© !");
}

void SendBadgeToAPI(String uid) {
    if (WiFi.status() != WL_CONNECTED) {
        Serial.println("‚ùå - ERREUR : Pas de connexion WiFi !");
        return;
    }

    Serial.println("‚úâÔ∏è - Envoi du badge √† l'API...");
    Serial.println("‚ÑπÔ∏è - Adresse IP de l'ESP32 : " + WiFi.localIP().toString());

    HTTPClient http;
    http.begin("http://192.168.5.185:3000/api/badges/pending");
    http.addHeader("Content-Type", "application/json");
    String httpRequestData = "{\"uuid\":\"" + uid + "\"}";

    Serial.println("‚úâÔ∏è - Envoi de la requ√™te POST...");
    int httpResponseCode = http.POST(httpRequestData);

    if (httpResponseCode == 200) {
        String response = http.getString();
        Serial.println("‚úÖ - Requ√™te POST r√©ussie !");
        Serial.println("üìß - R√©ponse : " + response);
    } else if (httpResponseCode == 201) {
        String response = http.getString();
        Serial.println("‚úÖ - Requ√™te POST r√©ussie !");
        Serial.println("üìß - R√©ponse : " + response);
        digitalWrite(LED_RED, LOW);
        digitalWrite(LED_GREEN, HIGH);
        delay(2000);
        digitalWrite(LED_GREEN, LOW);
    } else if (httpResponseCode == 403) {
        String response = http.getString();
        Serial.println("‚ùå - Requ√™te POST refus√©e !");
        Serial.println("üìß - R√©ponse : " + response);
        digitalWrite(LED_RED, HIGH);
        digitalWrite(LED_GREEN, LOW);
        delay(2000);
        digitalWrite(LED_RED, LOW);
    } else {
        Serial.println("‚ùå - Erreur serveur !");
        Serial.println("Code HTTP : " + String(httpResponseCode));
        Serial.println("Erreur : " + http.errorToString(httpResponseCode));
        digitalWrite(LED_RED, HIGH);
        digitalWrite(LED_GREEN, LOW);
        delay(2000);
        digitalWrite(LED_RED, LOW);
    }
}

void ReadBadge() {
    if (!mfrc522.PICC_IsNewCardPresent()) return;
    if (!mfrc522.PICC_ReadCardSerial()) return;

    Serial.println("‚úÖ Lecture badge r√©ussie !");
    String uidString = "";

    Serial.print("Badge d√©tect√© : UID ");
    for (byte i = 0; i < mfrc522.uid.size; i++) {
        uidString += (mfrc522.uid.uidByte[i] < 0x10 ? "0" : "") + String(mfrc522.uid.uidByte[i], HEX);
    }
    uidString.toUpperCase();
    Serial.print(uidString);

    Serial.println();
    SendBadgeToAPI(uidString);

    delay(1000);
    if (!mfrc522.PICC_IsNewCardPresent()) {
        Serial.println("üì≠ Aucun badge d√©tect√©.");
        delay(100);
        return;
    }
    if (!mfrc522.PICC_ReadCardSerial()) {
        Serial.println("‚ùå Erreur de lecture badge.");
        delay(100);
        return ;
    }

    delay(100);
}